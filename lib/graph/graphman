#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Graph based identity management.
#
# Each identity-artifact (e.g. "author_email") is a node.
# Nodes are connected by edges according to pluggable algorithms.
# The connected components of the resulting graph are individual identities.
# Supports json output (default) and graphviz output (use --dot flag).
# Use the --stats flag to print statistics, instead of results.
# The --filter min argument may be used to remove all edges with a weight below min.
# Input is read as one commit per line in json format from stdin.
# See lazy algorithm for an example on how to interface with parseman.

import networkx as nx
from networkx.drawing.nx_agraph import graphviz_layout
import sys
import json
import importlib
from util.setencoder import SetEncoder
from util.stats_recorder import StatsRecorder
import argparse
import os
import pkgutil

#Set Possible Command Line Arguments and their help messages
cl_argument_parser = argparse.ArgumentParser(description='Graph based identity management',epilog='(c) 2016 Marco Brack, Carsten Hartenfels, Michael Monschau')
cl_argument_parser.add_argument("algorithm",metavar="algorithm", help="the algorithm to use for creating connections",choices=[modname for importer, modname, ispkg in pkgutil.iter_modules(importlib.import_module("algorithm").__path__)])
outputgroup = cl_argument_parser.add_mutually_exclusive_group()
outputgroup.add_argument("--dot", action="store_true", help="use graphviz output")
outputgroup.add_argument("--stats", action="store_true", help="print statistics, instead of results")
cl_argument_parser.add_argument("--filter", help="remove all edges with a weight below", type=int, metavar="min")

#Parse the Command Line Arguments
args = cl_argument_parser.parse_args()

algorithm = importlib.import_module("algorithm."+args.algorithm)
statsRecorder = StatsRecorder()

artifact_graph = nx.Graph()

for line in sys.stdin:
    commit = json.loads(line)
    algorithm.learn_commit(artifact_graph, commit)
    statsRecorder.record_commit(commit)

identities = []
for component in nx.connected_components(artifact_graph):
    identities.append(component)


if args.filter:
    minimum = args.filter
    for u, v, data in artifact_graph.edges(data=True):
        if data["label"] < minimum:
            artifact_graph.remove_edge(u, v)


if args.dot:
    print nx.drawing.nx_agraph.to_agraph(artifact_graph)
elif args.stats:
    stats = {
        "commits": statsRecorder.commits,
        "author_mails": len(statsRecorder.author_mails),
        "author_names": len(statsRecorder.author_names),
        "committer_mails": len(statsRecorder.committer_mails),
        "committer_names": len(statsRecorder.committer_names),
        "signers": len(statsRecorder.signers),
        "signer_keys": len(statsRecorder.signer_keys),
        "unique_artifacts": len(artifact_graph.nodes()),
        "identities_found": len(identities)
    }
    print json.dumps(stats, indent=1, cls=SetEncoder)
else:
    print json.dumps(identities, cls=SetEncoder, ensure_ascii=False).encode('utf8')
