#!/usr/bin/env perl
use strict;
use warnings;
use autodie;
use Encode qw(decode);
use List::Util qw(any);
use JSON::PP;


my $identities = decode_json(scalar <STDIN>);


my %identity_map;

for my $i (0 .. $#$identities) {
    for my $identifier (@{$identities->[$i]}) {
        if (exists $identity_map{$identifier}) {
            die "Duplicate identifier '$identifier'\n";
        }
        $identity_map{$identifier} = $i;
    }
}


sub identify {
    my ($first, @rest) = grep { defined } @identity_map{@_};
    return undef unless defined $first;

    if (any { $_ ne $first } @rest) {
        my $keys   = join ', ', grep { defined } @_;
        my $values = join ', ', $first, @rest;
        die "Multiple different identities for $keys: $values\n";
    }

    return int $first;
}


my %commit_map;

while (<STDIN>) {
    my $commit = decode_json($_);
    $commit_map{$commit->{hash}} = {
        author    => identify(@{$commit}{   'author_name',    'author_mail'}),
        committer => identify(@{$commit}{'committer_name', 'committer_mail'}),
        signer    => identify($commit->{signer}),
    };
}


print JSON::PP->new->utf8->pretty->canonical->encode({
    identities => $identities,
    commits    => \%commit_map,
});
