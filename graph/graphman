#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Graph based identity management.
#
# Each identity-artifact (e.g. "author_email") is a node.
# Nodes are connected by edges according to pluggable algorithms.
# The connected components of the resulting graph are individual identities.
# Supports json output (default) and graphviz output (use --dot flag).
# The --filter min argument may be used to remove all edges with a weight below min.
# Input is read as one commit per line in json format from stdin.
# See lazy algorithm for an example on how to interface with parseman.

import networkx as nx
from networkx.drawing.nx_agraph import graphviz_layout
import sys
import json
import importlib



if "--help" in sys.argv:
    print "Useage: graph algorithm [--dot] [--filter min]"
    sys.exit(0)


class SetEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, set):
            return list(obj)
        return json.JSONEncoder.default(self, obj)


algorithm = importlib.import_module(sys.argv[1])

artifact_graph = nx.Graph()

for line in sys.stdin:
    commit = json.loads(line)
    algorithm.learn_commit(artifact_graph, commit)

identities = []
for component in nx.connected_components(artifact_graph):
    identities.append(component)


if "--filter" in sys.argv:
    minimum = int(sys.argv[sys.argv.index("--filter") + 1])
    for u, v, data in artifact_graph.edges(data=True):
        if data["label"] < minimum:
            artifact_graph.remove_edge(u, v)


if "--dot" in sys.argv:
    print nx.drawing.nx_agraph.to_agraph(artifact_graph)
else:
    print json.dumps(identities, indent=1, cls=SetEncoder)
