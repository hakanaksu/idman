#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Graph based identity management.
#
# Each identity-artifact (e.g. "author_email") is a node.
# Nodes are connected by edges according to pluggable algorithms.
# The connected components of the resulting graph are individual identities.
# Supports json output (default) and graphviz output (use --dot flag).
# Use the --stats flag to print statistics, instead of results.
# The --filter min argument may be used to remove all edges with a weight below min.
# Input is read as one commit per line in json format from stdin.
# See lazy algorithm for an example on how to interface with parseman.

import networkx as nx
from networkx.drawing.nx_agraph import graphviz_layout
import sys
import json
import importlib
from setencoder import SetEncoder
from stats_recorder import StatsRecorder



if "--help" in sys.argv:
    print "Useage: graph algorithm [--dot | --stats] [--filter min]"
    sys.exit(0)


algorithm = importlib.import_module(sys.argv[1])
statsRecorder = StatsRecorder()

artifact_graph = nx.Graph()

for line in sys.stdin:
    commit = json.loads(line)
    algorithm.learn_commit(artifact_graph, commit)
    statsRecorder.record_commit(commit)

identities = []
for component in nx.connected_components(artifact_graph):
    identities.append(component)


if "--filter" in sys.argv:
    minimum = int(sys.argv[sys.argv.index("--filter") + 1])
    for u, v, data in artifact_graph.edges(data=True):
        if data["label"] < minimum:
            artifact_graph.remove_edge(u, v)


if "--dot" in sys.argv:
    print nx.drawing.nx_agraph.to_agraph(artifact_graph)
if "--stats" in sys.argv:
    stats = {
        "commits": statsRecorder.commits,
        "author_mails": len(statsRecorder.author_mails),
        "author_names": len(statsRecorder.author_names),
        "committer_mails": len(statsRecorder.committer_mails),
        "committer_names": len(statsRecorder.committer_names),
        "signers": len(statsRecorder.signers),
        "signer_keys": len(statsRecorder.signer_keys),
        "unique_artifacts": len(artifact_graph.nodes()),
        "identities_found": len(identities)
    }
    print json.dumps(stats, indent=1, cls=SetEncoder)
else:
    print json.dumps(identities, indent=1, cls=SetEncoder)
