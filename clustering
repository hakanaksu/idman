#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import json

## Helper for set-Encoding in json  (to list)
class SetEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, set):
            return list(obj)
        return json.JSONEncoder.default(self, obj)

# Helper Function for only adding non-falsy values
def addToSet(set,el):
    if el:
        set.add(el)
    return set

## Adds the developers participating at the commit to the commit
def learnDev(dataset,com):
    commit = json.loads(com)
    dataset = processSingleDev(dataset,commit['author_name'],commit['author_mail'])
    dataset= processSingleDev(dataset,commit['committer_name'],commit['committer_mail'],commit['signer'],commit['signer_key'])
    return dataset

## Tries to find exsisting developer in dataset and adds him if not found
def processSingleDev(dataset, name, mail, signer=None, skey=None):
    for d in dataset:
         if  name in d['Names'] or isEMailSim(mail,d) or signer in d['Names'] or skey in d['Keys']:
            addToSet(d['Names'],name)
            addToSet(d['Names'],signer) #Signer makes commit
            addToSet(d['Mails'],mail)
            addToSet(d['Keys'],skey)
            return dataset
    tmp={}
    tmp['Names']=addToSet(set(),name)
    tmp['Mails']=addToSet(set(),mail)
    addToSet(tmp['Names'],signer)
    tmp['Keys']=addToSet(set(),skey)
    dataset.append(tmp)
    return dataset

#searches for email-user in exsisting usernames and emails
def isEMailSim(email1, data):
    if not isinstance(email1,basestring):
        return False
    username = email1.split("@")[0]
    for mail in data['Mails']:
        if mail.split('@') == username:
            return True
    for name in data['Names']:
	if username == name:
            return True
    return False


if __name__ == "__main__":
	dataset = []
	for line in sys.stdin:
		dataset=learnDev(dataset,line)
	##TODO a few more tries to remove duplicate developers
	for line in dataset:
		print json.dumps(dataset,cls=SetEncoder)
