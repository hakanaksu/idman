#!/usr/bin/ruby


require 'json'
require 'pp'

table = Hash.new
Dir.glob('results/*/*.json') do |results_file|
  content = File.read(results_file)
  results = JSON.parse(content)
  if results.key?("fmeasure") then
    filename_parts = results_file.split(File::SEPARATOR)
    algorithm = filename_parts[1]
    repo = filename_parts[2].sub!(".json", "")
    fmeasure = results["fmeasure"].round(3)
    unless table.key?(repo)
      table[repo] = Hash.new
    end
    table[repo][algorithm] = fmeasure
  end
end
puts "% FMEASURES"
print "\\begin{tabular}{|l|"
table.values[0].length.times do
  print "c|"
end
puts "}"
puts "\\hline"
print "\\textbf{Repo}"
table.values[0].each do |algorithm, fmeasure|
  print " & \\textbf{#{algorithm}}"
end
puts "\\\\\\hline"
table.each do |repo, algorithms|
  print "#{repo}"
  algorithms.each do |algorithm, fmeasure|
    print " & #{fmeasure}"
  end
  puts "\\\\\\hline"
end
puts "\\end{tabular}"

####################################################################

table = Hash.new
Dir.glob('results/*/*.json') do |results_file|
  content = File.read(results_file)
  results = JSON.parse(content)
  if results.key?("false_positives") then
    filename_parts = results_file.split(File::SEPARATOR)
    algorithm = filename_parts[1]
    repo = filename_parts[2].sub!(".json", "")
    fmeasure = results["false_positives"]
    unless table.key?(repo)
      table[repo] = Hash.new
    end
    table[repo][algorithm] = fmeasure
  end
end
puts "% FALSE_POSITIVES"
print "\\begin{tabular}{|l|"
table.values[0].length.times do
  print "c|"
end
puts "}"
puts "\\hline"
print "\\textbf{Repo}"
table.values[0].each do |algorithm, fmeasure|
  print " & \\textbf{#{algorithm}}"
end
puts "\\\\\\hline"
table.each do |repo, algorithms|
  print "#{repo}"
  algorithms.each do |algorithm, fmeasure|
    print " & #{fmeasure}"
  end
  puts "\\\\\\hline"
end
puts "\\end{tabular}"

#######################################################################

table = Hash.new
Dir.glob('results/*/*.json') do |results_file|
  content = File.read(results_file)
  results = JSON.parse(content)
  if results.key?("false_positives") then
    filename_parts = results_file.split(File::SEPARATOR)
    algorithm = filename_parts[1]
    repo = filename_parts[2].sub!(".json", "")
    fmeasure = results["identitites"]
    unless table.key?(repo)
      table[repo] = Hash.new
    end
    table[repo][algorithm] = fmeasure
  end
end
puts "% NUMBER OF IDENTITIES"
print "\\begin{tabular}{|l|"
table.values[0].length.times do
  print "c|"
end
puts "}"
puts "\\hline"
print "\\textbf{Repo}"
table.values[0].each do |algorithm, fmeasure|
  print " & \\textbf{#{algorithm}}"
end
puts "\\\\\\hline"
table.each do |repo, algorithms|
  print "#{repo}"
  algorithms.each do |algorithm, fmeasure|
    print " & #{fmeasure}"
  end
  puts "\\\\\\hline"
end
puts "\\end{tabular}"

#######################################################################

puts "Ground Truth Number Of IDENTITIES"
Dir.glob('reference/*.json') do |results_file|
  content = File.read(results_file)
  results = JSON.parse(content)
  print results_file + " "
  puts results.length
end
