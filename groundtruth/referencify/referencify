#!/usr/bin/env perl
use Mojolicious::Lite;
use autodie ':all';
use File::Basename qw(basename);
use File::Spec::Functions qw(catfile catdir);
use FindBin;
use Mojo::Util qw(slurp);
use Storable;


my $data = catdir($FindBin::Bin, 'data');

sub to_repo {
    my ($path) = @_;
    my $name   = basename($path);
    my @files  = glob "$_/work/*";
    return {
        name => $name,
        left => scalar @files,
    };
}


get '/' => sub {
    my ($c) = @_;
    return $c->render('index', repo => '');
};

get '/:name' => sub {
    my ($c) = @_;
    return $c->render('index', repo => $c->param('name'));
};


get '/api/list' => sub {
    my ($c) = @_;
    my @repos = map { to_repo($_) } grep { -d } glob "$data/*";
    return $c->render(json => \@repos);
};


get '/api/repo/:name' => sub {
    my ($c)   = @_;
    my $dir   = catdir($data, $c->param('name'), 'work');
    my @files = glob "$dir/*";

    if (@files) {
        my $file  = $files[int rand @files];
        return $c->render(json => {
            name     => basename($file),
            identity => retrieve($file),
            left     => scalar @files,
        });
    }
    else {
        return $c->render(json => {
            left => 0,
        });
    }
};

post '/api/repo/:name' => sub {
    my ($c) = @_;
    my $repo = $c->param('name');
    my $work = catdir($data, $repo, 'work');
    my $done = catdir($data, $repo, 'done');

    my $req  = $c->req->json;
    my $name = $req->{name};

    if (-f "$work/$name") {
        my $i = 0;

        for my $identity (@{$req->{identities}}) {
            if (@$identity) {
                store($identity, catfile($done, join('-', $name, ++$i)));
            }
        }

        unlink "$work/$name";
    }

    return $c->render(text => '');
};


get '/api/results/:name' => sub {
    my ($c) = @_;
    my $repo = $c->param('name');
    my $done = catdir($data, $repo, 'done');

    my %merged;
    for (glob "$done/*-*") {
        my ($key) = /(\d+)-\d+$/;
        push @{$merged{$key}}, retrieve($_);
    }

    return $c->render(json => \%merged);
};

post '/api/results/:name' => sub {
    my ($c) = @_;
    my $repo = $c->param('name');
    my $work = catdir($data, $repo, 'work');
    my $done = catdir($data, $repo, 'done');

    my $key   = $c->req->json->{key};
    my @files = glob "$done/$key-*";
    my @flat  = map { @{retrieve($_)} } @files;

    store(\@flat, catfile($work, $key));
    unlink for @files;

    return $c->render(text => '');
};


app->start;
